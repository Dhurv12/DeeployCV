from PIL import Image
import numpy as np

def is_flag_of_indonesia_or_poland(image_path):
    """
    Determine if the given image is the flag of Indonesia or Poland by detecting flag boundaries.

    Parameters:
    image_path (str): Path to the image file.

    Returns:
    str: "Indonesia" if the flag is Indonesia's,
         "Poland" if the flag is Poland's,
         "Neither" if it matches neither.
    """
    # Open the image and convert it to RGB
    image = Image.open(image_path).convert("RGB")

    # Convert image to grayscale for boundary detection
    gray_image = image.convert("L")
    gray_pixels = np.array(gray_image)

    # Detect edges using a simple gradient method
    edges = np.abs(np.diff(gray_pixels, axis=0)) + np.abs(np.diff(gray_pixels, axis=1))

    # Threshold edges to identify significant changes
    edge_threshold = 50
    edges[edges < edge_threshold] = 0
    edges[edges >= edge_threshold] = 255

    # Find the bounding box of the largest connected component
    def find_bounding_box(edge_pixels):
        rows, cols = np.where(edge_pixels > 0)
        if len(rows) == 0 or len(cols) == 0:
            return None  # No significant edges detected
        return (min(rows), max(rows), min(cols), max(cols))

    bbox = find_bounding_box(edges)

    if bbox is None:
        return "Neither"  # No flag-like region found

    # Crop the region of interest based on the bounding box
    top, bottom, left, right = bbox
    cropped_image = image.crop((left, top, right, bottom))

    # Resize the cropped region to standard dimensions
    cropped_image = cropped_image.resize((100, 60))

    # Convert cropped image to a NumPy array
    pixels = np.array(cropped_image)

    # Function to calculate the dominant color in a section
    def dominant_color(section):
        section_flat = section.reshape(-1, 3)
        unique_colors, counts = np.unique(section_flat, axis=0, return_counts=True)
        dominant_idx = np.argmax(counts)
        return unique_colors[dominant_idx]

    # Check if a color is red
    def is_red(color):
        return color[0] > 150 and color[1] < 100 and color[2] < 100

    # Check if a color is white
    def is_white(color):
        return color[0] > 200 and color[1] > 200 and color[2] > 200

    # Split the cropped image into top and bottom halves
    height = pixels.shape[0]
    mid = height // 2
    top_half = pixels[:mid, :, :]
    bottom_half = pixels[mid:, :, :]

    # Determine dominant colors for the top and bottom halves
    top_dominant_color = dominant_color(top_half)
    bottom_dominant_color = dominant_color(bottom_half)

    # Check if the colors match Indonesia's or Poland's flag patterns
    if is_red(top_dominant_color) and is_white(bottom_dominant_color):
        return "Indonesia"
    elif is_white(top_dominant_color) and is_red(bottom_dominant_color):
        return "Poland"

    return "Neither"

# Example usage:
# result = is_flag_of_indonesia_or_poland("path_to_flag_image.jpg")
# print(result)
